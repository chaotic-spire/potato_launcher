name: Build & deploy

on:
  workflow_dispatch:
  workflow_run:
    workflows: ['Check']
    types: [completed]
  push:
    branches: [master]
    paths: [.github/workflows/build.yml]

jobs:
  binaries:
    name: Build binaries
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]

    env:
      MC_REGION: ${{ secrets.S3_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.S3_TENANT }}:${{ secrets.S3_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_SECRET_KEY }}

    steps:
      - uses: actions/checkout@v4

      # üß∞ Install MinIO Client
      - name: Install MinIO Client
        run: |
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            wget https://dl.min.io/client/mc/release/linux-amd64/mc
            chmod +x mc
            sudo mv mc /usr/local/bin/
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            brew install minio/stable/mc
          elif [[ "$RUNNER_OS" == "Windows" ]]; then
            powershell -Command '
              Invoke-WebRequest "https://dl.min.io/client/mc/release/windows-amd64/mc.exe" -OutFile "mc.exe";
              New-Item -ItemType Directory -Force -Path "$env:USERPROFILE\bin";
              Move-Item mc.exe "$env:USERPROFILE\bin\mc.exe"
            '
            echo "$env:USERPROFILE\bin" >> $GITHUB_PATH
          fi
        shell: bash

      - name: Verify MinIO Client
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            export PATH="$HOME/bin:$PATH"
          fi
          mc --version
        shell: bash

      # üß∞ Install Python deps
      - name: Install configure.py dependencies
        run: |
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            sudo apt update
            sudo apt install -y python3 python3-tomlkit python3-httpx imagemagick
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            brew install imagemagick
            pip install tomlkit httpx
          else
            pip install tomlkit httpx
          fi
        shell: bash

      # üõ†Ô∏è Setup LAUNCHER_NAME and related vars
      - name: Set environment variables
        shell: bash
        run: |
          LAUNCHER_NAME="${{ vars.LAUNCHER_NAME }}"
          if [[ -z "$LAUNCHER_NAME" && -f build.env ]]; then
            LAUNCHER_NAME=$(grep '^LAUNCHER_NAME=' build.env | cut -d= -f2-)
          fi
          if [[ -z "$LAUNCHER_NAME" ]]; then
            echo "LAUNCHER_NAME not set"
            exit 1
          fi
          echo "LAUNCHER_NAME=$LAUNCHER_NAME" >> $GITHUB_ENV
          echo "DATA_LAUNCHER_NAME=$(echo "$LAUNCHER_NAME" | tr '[:upper:]' '[:lower:]' | tr -d "'" | tr ' ' '_')" >> $GITHUB_ENV
          echo "VERSION=${{ github.sha }}" >> $GITHUB_ENV

      # üì¶ Cache Rust
      - uses: Swatinem/rust-cache@v2
        with:
          key: "build-${{ matrix.os }}"
          save-if: ${{ github.ref == 'refs/heads/master' }}

      # üî® Platform-specific build
      - name: Build the launcher
        env:
          VERSION_MANIFEST_URL: ${{ vars.VERSION_MANIFEST_URL }}
          AUTO_UPDATE_BASE: ${{ vars.AUTO_UPDATE_BASE }}
          LAUNCHER_APP_ID: ${{ vars.LAUNCHER_APP_ID }}
          LAUNCHER_ICON: ${{ vars.LAUNCHER_ICON }}
          LAUNCHER_DESCRIPTION: ${{ vars.LAUNCHER_DESCRIPTION }}
          LAUNCHER_KEYWORDS: ${{ vars.LAUNCHER_KEYWORDS }}
        run: |
          set -e
          mkdir -p build
          python packaging/configure.py

          if [[ "$RUNNER_OS" == "Windows" ]]; then
            cargo build --bin launcher --profile release-lto
            mv "target/release-lto/launcher.exe" "build/${LAUNCHER_NAME}.exe"
            echo "$VERSION" > build/version_windows.txt

          elif [[ "$RUNNER_OS" == "Linux" ]]; then
            cargo build --bin launcher --profile release-lto
            mv "target/release-lto/launcher" "build/${DATA_LAUNCHER_NAME}"
            echo "$VERSION" > build/version_linux.txt

          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            which cargo-bundle || cargo install cargo-bundle
            rustup target add x86_64-apple-darwin aarch64-apple-darwin
            export MACOSX_DEPLOYMENT_TARGET=10.12
            cargo build --bin launcher --profile release-lto --target x86_64-apple-darwin
            export MACOSX_DEPLOYMENT_TARGET=11.0
            cargo bundle --package launcher --bin launcher --profile release-lto --target aarch64-apple-darwin

            mkdir -p app
            mv "target/aarch64-apple-darwin/release-lto/bundle/osx/$LAUNCHER_NAME.app" "app/$LAUNCHER_NAME.app"

            plutil -replace NSCameraUsageDescription -string "A Minecraft mod wants to access your camera." "app/$LAUNCHER_NAME.app/Contents/Info.plist"
            plutil -replace NSMicrophoneUsageDescription -string "A Minecraft mod wants to access your microphone." "app/$LAUNCHER_NAME.app/Contents/Info.plist"
            plutil -insert NSEnableAutomaticCustomizeTouchBarMenuItem -bool false "app/$LAUNCHER_NAME.app/Contents/Info.plist"
            plutil -insert NSFunctionBarAPIEnabled -bool false "app/$LAUNCHER_NAME.app/Contents/Info.plist"

            lipo -create -output "app/$LAUNCHER_NAME.app/Contents/MacOS/launcher" \
              "target/x86_64-apple-darwin/release-lto/launcher" \
              "app/$LAUNCHER_NAME.app/Contents/MacOS/launcher"

            codesign --force --deep --sign - "app/$LAUNCHER_NAME.app"

            ln -s /Applications app/Applications

            DMG_FILENAME="${LAUNCHER_NAME}.dmg"
            for i in {1..5}; do
              hdiutil create "$DMG_FILENAME" -ov -volname "$LAUNCHER_NAME" -fs HFS+ -srcfolder "app/" && break
              echo "Retrying hdiutil create... ($i/5)"
              sleep 5
            done

            mv "$DMG_FILENAME" build/
            mv "app/$LAUNCHER_NAME.app" "app/update.app"
            tar -czvf "build/${DATA_LAUNCHER_NAME}_macos.tar.gz" -C app "update.app"
            echo "$VERSION" > build/version_macos.txt
          fi
        shell: bash

      # ‚òÅÔ∏è Upload to MinIO
      - name: Upload to MinIO
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            MC_CMD="$HOME/bin/mc.exe"
          else
            MC_CMD="mc"
          fi
          $MC_CMD alias set cloudru ${{ secrets.S3_ENDPOINT }} ${{ secrets.S3_TENANT }}:${{ secrets.S3_ACCESS_KEY }} ${{ secrets.S3_SECRET_KEY }} --api S3v4
          $MC_CMD mirror --overwrite ./build cloudru/${{ secrets.S3_NAME }}/launcher
        shell: bash
